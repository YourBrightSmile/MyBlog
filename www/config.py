#coding=utf-8
'''
    configuration,automaticall generated by config_default and config_override auto
'''
import config_default
class Dict(dict):
    '''
        simple dict but support access as x.y style
    '''
    def __init__(self,names=(),values=(),**kw):
        super(Dict,self).__init__(**kw)
        #zip ==>[(names1,values1),(),()]
        for k,v in zip(names,values):
            self[k]=v
    #当一个实例调用一个不存在的属性时调用这个方法可以实现使d['x']支持d.x
    def __getattr__(self,key):
        try:
            return self[key]
        except KeyError:
            raise AttributeError(r"'Dict' object has no attribute '%s'" % key)
    #实现d.a=xxx
    def __setattr__(self, key, value):
        self[key] = value             
#将两个配置融合
def merge(defaults,override):
    r={}
    for k,v in defaults.items():
        if k in override:
            #因为值也有可能是一个字典，采用递归形式
            if isinstance(v, dict):
                r[k]=merge(v,override[k])
            else:
                r[k]=override[k]
        else:
            r[k]=v
    return r
#将配置保存成一个Dict
def toDict(d):
    D=Dict()
    for k,v in d.items():
        #因为值也有可能是一个字典，采用递归形式
        D[k] = toDict(v) if isinstance(v, dict) else v
    return D
configs=config_default.configs
try:
    import config_override
    configs = merge(configs,config_override.configs)
except ImportError:
    pass
configs = toDict(configs)